median(x <- 1:10)
x
# but when you do this
# "<-" is executed first
# then the function median is called
# when asked what is your input
# you give the answer "X"
rm(list=ls())
# Exercise 1.1....
205+106
2*6+9/3
2*(6+9)/3
3^4-4^3
28%%6
# Exercise 1.2...
red_apples <- 4
green_apples <- 5
basket_apples <- red_apples + green_apples
basket_apples
basket_apples*18
# Exercise 1.3...
my_course <- "MH1234"
my_score <- 76
my_grade <- "A-"
my_core <- T
# T for TRUE and F for FALSE
class(my_course)
class(my_score)
class(my_grade)
class(my_core)
#  Exercise 1.4...
seq(10)
seq(0,10,len=10)
seq(0,10,by=1)
rep(2,3)
rep(-1,4)
rep(1:3,2)
rep("A",4)
c(rep("A",3),rep("B",3))
rep(c("A","B"),3)
vector1 <- seq(3,9,by=2)
vector1 <- seq(3,9,len=4)
vector1
vector2 <- c(rep(2,2),rep(3,3),rep(4,4))
vector2
vector3 <- c(rep(TRUE,2),rep(FALSE,3))
vector3
vector4 <- rep(c("High","Medium","Low"),2)
vector4
# Exercise 1.5...
poker_winnings <- c(140,-50,20,-120,240)
roulette_winnings <- c(-24,-50,100,-350,10)
days <- c("Monday","Tuesday","Wednesday",
"Thursday","Friday")
names(poker_winnings) <- days
names(roulette_winnings) <- days
poker_winnings[poker_winnings > 0]
daily_winnings <- poker_winnings + roulette_winnings
daily_winnings[daily_winnings > 0]
sum(poker_winnings)
sum(roulette_winnings)
sum(poker_winnings) > sum(roulette_winnings)
sum(poker_winnings) + sum(roulette_winnings)
# Exercise 1.6...
matrix_4x2 <- matrix(c(1:8),nrow=4,byrow=F)
# by default, byrow=F, we can ignore that
matrix_4x2
matrix_2x4 <- matrix(c(1:4,11:14),ncol=4,byrow=T)
matrix_2x4
matrix_4x2 %*% matrix_2x4
matrix_2x4 %*% matrix_4x2
matrix_2x2 <- matrix_4x2[1:2,]
matrix_2x2
solve(matrix_2x2)
# solve for x such that a %*% x = b, if missing, b will be I
# then, it just calculates the inverse of a
diag(3)
diag(c(2,3,5))
# Exercise 1.7...
apple <- c(350,150)
orange <- c(400,230)
watermelon <- c(180,90)
fruit_matrix <- matrix(c(apple,orange,watermelon),nrow=3,byrow=T)
fruit_matrix
rownames(fruit_matrix) <- c("Apple","Orange","Watermelon")
colnames(fruit_matrix) <- c("Weekday","Weekend")
rowSums(fruit_matrix)
colSums(fruit_matrix)
# column sum gives the total number of fruits sold during weekdays
# and weekends respectively
cbind(fruit_matrix,rowSums(fruit_matrix))
price <- matrix(c(1,1.5,4),ncol =3)
rowSums(price %*% fruit_matrix)
# or alternatively....
price <- matrix(c(1,1.5,4),ncol =1)
rowSums(fruit_matrix) %*% price
# because rowSums returns matrix with only one row
# we convert it to one column
# one way to do transpose
price
price <- matrix(price,ncol = 3)
price
# or...
t(price)
rm(list=ls())
# Exercise 4.1
# Exercise 4.1
rivers <- read.table("C:/Users/nguwijy/Dropbox/Study Material/data analysis with computing/yeokweepoo/chap4")
# Exercise 4.1
rivers <- read.table("C:/Users/nguwijy/Dropbox/Study Material
/data analysis with computing/yeokweepoo/chap4/river.txt")
# Exercise 4.1
rivers <- read.table("C:/Users/nguwijy/Dropbox/Study Material
/data analysis with computing/yeokweepoo/chap4/river.txt", sep=" ", header=T)
# Exercise 4.1
rivers <- read.table("C:/Users/nguwijy/Dropbox/Study Material
/data analysis with computing/yeokweepoo/chap4/river.txt", sep="\t", header=T)
# Exercise 4.1
rivers <- read.table("C:/Users/nguwijy/Dropbox/Study Material/data analysis with computing/
yeokweepoo/chap4/rivers.txt", sep="\t", header=T)
rm(list=ls())
# Exercise 4.1
rivers <- read.table("C:/Users/nguwijy/Dropbox/Study Material/data analysis with computing/
yeokweepoo/chap4/rivers.txt", sep="\t", header=T)
# Exercise 4.1
rivers <- read.table('C:/Users/nguwijy/Dropbox/Study Material/data analysis with computing/
yeokweepoo/chap4/rivers.txt', sep="\t", header=T)
# Exercise 4.1
rivers <- read.table("C:/Users/nguwijy/Dropbox/Study Material/data analysis with computing/yeokweepoo/chap4/rivers.txt", sep="\t", header=T)
head(rivers)
str(rivers)
hist(rivers)
boxplot(rivers)
hist(rivers)
hist(rivers$x)
hist(rivers$x)
boxplot(rivers$x)
qqnorm(rivers)
qqline(rivers)
qqnorm(rivers$x)
qqline(rivers$x)
mean5[i] <- mean(sample(rivers, size=5, replace=F))
mean5 <- numeric(1000)
for (i in 1:1000) {
mean5[i] <- mean(sample(rivers, size=5, replace=F))
}
rivers <- rivers$x
hist(rivers)
boxplot(rivers)
qqnorm(rivers)
qqline(rivers)
mean5 <- numeric(1000)
for (i in 1:1000) {
mean5[i] <- mean(sample(rivers, size=5, replace=F))
}
hist(mean5)
mean30 <- numeric(1000)
for (i in 1:1000) {
mean30[i] <- mean(sample(rivers, size=30, replace=F))
}
hist(mean30)
qqnorm(mean5)
qqline(mean5)
qqnorm(mean30)
qqline(30)
qqnorm(mean30)
qqline(mean30)
# Exercise 4.2
install.packages("HSAUR")
library("HSAUR")
str(roomwidth)
?str
boxplot(roomwidth$width ~ roomwidth$unit)
cfactor <- ifelse(roomwidth$unit=="feet", 1, 3.28)
roomwidth$convert <- roomwidth$width*cfactor
roomwidth
boxplot(roomwidth$convert ~ roomwidth$unit)
tres"])
sd(roomwidth$convert[roomwidth$unit=="metres"])
mean(roomwidth$convert[roomwidth$unit=="feet"])
sd(roomwidth$convert[roomwidth$unit=="feet
# now it seems the "metres" category is higher!
mean(roomwidth$convert[roomwidth$unit=="metres"])
sd(roomwidth$convert[roomwidth$unit=="metres"])
mean(roomwidth$convert[roomwidth$unit=="feet"])
sd(roomwidth$convert[roomwidth$unit=="feet"])
t.test(roomwidth$convert[roomwidth$unit=="metres"])
# 45.42982 to 59.67927
# p value is very small, reject null hypothesis!
t.test(roomwidth$convert[roomwidth$unit=="feet"])
# Exercise 4.2
prop.test(17, 23, conf.level = 0.95)
prop.test(17, 23, conf.level = 0.8)
prop.test(170, 230, conf.level = 0.95)
prop.test(11, 23, conf.level = 0.95)
prop.test(1, 23, conf.level = 0.95)
qqplot(coffee)
# Exercise 5.1...
coffee<- c(1.95, 1.78, 2.10, 1.82, 1.73, 2.01, 1.83, 1.90, 2.05, 1.85, 1.96, 1.98, 1.79)
qqplot(coffee)
qqnorm(coffee)
qqline(coffee)
# looks okay...
shapiro.test(coffee)
?shapiro.test
n <- length(coffee)
xbar <- mean(coffee)
s <- sd(coffee)
alpha <- 0.1
z <- qnorm(1-alpha/2)
t <- qt(1-alpha/2, df=n-1)
zCI90 <- c(xbar-z*s/sqrt(n), xbar+z*s/sqrt(n))
tCI90 <- c(xbar-t*s/sqrt(n), xbar+t*s/sqrt(n))
zCI90
tCI90
t.test(coffee, conf.level = 0.9)
z1 <- qnorm(1-alpha)
t1 <- qt(1-alpha, df=n-1)
infty
z1CI90 <- c("-infty", xbar+z1*s/sqrt(n))
z1CI90 <- c("-infty", xbar+z1*s/sqrt(n))
t1CI90 <- c("-infty", xbar+t1*s/sqrt(n))
z1CI90
t1CI90
t.test(coffee, conf.level = 0.9, alt="less")
str(airquality)
# Exercise 5.2...
air89 <- subset(airquality, (Month==8 | Month==9))
wind89 <- air89[,"wind"]
wind89 <- air89[,"Wind"]
qqnorm(wind89)
qqline(wind89)
# H0: mu =   10
# H1: mu =/= 10
n <- length(wind89)
xbar <- mean(wind89)
s <- sd(wind89)
mu0 <- 19
mu0 <- 10
z <- (xbar - mu0)/s*sqrt(n)
z_pval <- 2*pnorm(z)
z_pval
stats <- (xbar - mu0)/s*sqrt(n)
z_pval <- 2*pnorm(stats)
t_pval <- 2*pt(stats, df=n-1)
z_pval
t_pval
t.test(wind89, mu=10)
# Exercise 5.3...
# H0: p = 0.1
# H1: p > 0.1
phat <- 2700/25000
stats <- (phat - 0.1)/sqrt((p0*(1-p0))/25000)
p0 <- 0.1
stats <- (phat - 0.1)/sqrt((p0*(1-p0))/25000)
z_pval <- 1-pnorm(stats)
z_pval
air89 <- subset(airquality, (Month==8 | Month==9))
wind89 <- air89[,"Wind"]
qqnorm(wind89)
qqline(wind89)
# looks okay...
# H0: mu =   10
# H1: mu =/= 10
n <- length(wind89)
xbar <- mean(wind89)
s <- sd(wind89)
mu0 <- 10
stats <- (xbar - mu0)/s*sqrt(n)
z_pval <- 2*pnorm(stats)
t_pval <- 2*pt(stats, df=n-1)
z_pval
t_pval
t.test(wind89, mu=10)
# hence, reject the null hypothesis since p value very small
prop.test(2700, 25000, p=0.1, alt = "greater")
# Exercise 5.4...
# H0: X~N(0, 1)
# H1: X~N(mu1, 1), mu1 > 0
n <- c(10, 11, 20, 30)
p_val <- 1-pnorm(0.5*sqrt(n))
p_val
power <- 1 - pnorm((0.5-mu1)*sqrt(n))
# power is 1 - type II error
# type II error is failure to reject wrong statement
# hence given it is wrong, xbar ~ N(mu1, 1)
# type II error is
# Pr(xbar < 0.5)  = Pr((xbar - mu1)/(1/sqrt(n)) < (0.5-mu1)/(1/sqrt(n)))
#                 = Pr(Z < (0.5-mu1)*sqrt(n))
mu1 <- c(1, 1.1, 1.2, 1.3)
n <- 11
power <- 1 - pnorm((0.5-mu1)*sqrt(n))
power
install.packages("fExoticOptions")
library(fExoticOptions)
?StandardBarrierOption
StandardBarrierOption("cuo", 1, 0.7, 1.2, 0, 1, 0.01, 0, 0.1)
StandardBarrierOption("cuo", 1, 0.7, 1.2, 0, 1, 0.01, 0.01, 0.1)
StandardBarrierOption("cuo", 0.1, 0.7, 1.2, 0, 1, 0.01, 0.01, 0.1)
StandardBarrierOption("cuo", 1, 0.7, 1.2, 0, 0.1, 0.01, 0.01, 0.1)
TurnbullWakemanAsianApproxOption("c", 1, 1, 0.7, 0.1, 0.1, 0, 0.01, 0.01, 0.1)
LevyAsianApproxOption("c", 1, 1, 0.7, 0.1, 0.1, 0.01, 0.01, 0.1)
pdf("quartic_time_to_val_N25_diffM.pdf")
till <- 4
temp <- datafr[(datafr$N == interested_N) & (datafr$M == 1), ]
temp_num <- temp[abs((temp$tt_now/del_t) %% 1) <= 1e-3, "numerical_sol"]
plot(tt, temp_num,
main = paste("Comparison among different M's when N is", as.character(interested_N)), xlab = "time", ylab = "value function",
pch=pch_val[1], col = colors_val[1])
for (i in 2:till) {
temp <- datafr[(datafr$N == interested_N) & (datafr$M == i), ]
temp_num <- temp[abs((temp$tt_now/del_t) %% 1) <= 1e-3, "numerical_sol"]
points(tt, temp_num, pch=pch_val[i], col=colors_val[i])
}
legend("topright", legend = legend_val_M[1:(till)],
col = colors_val[1:(till)], pch = pch_val[1:(till)],
cex=0.75)
dev.off()
rm(list = ls())
# direc <- dirname(rstudioapi::getSourceEditorContext()$path)
wd <- "C:/Users/nguwijy/Dropbox/Projects/phd/code/plot_analysis"
setwd(wd)
filelist <- list.files(pattern = "T_0.3*")
datalist = lapply(filelist, function(x)read.table(x, sep=",", header=T))
datafr = do.call("rbind", datalist)
colors_val <- c("red", "green", "blue", "pink", "yellow")
pch_val <- c(18, 18, 18, 18, 18)
legend_val_M <- c("M = 1", "M = 2", "M = 3", "M = 4", "M = 5")
legend_val_N <- c("N = 25", "N = 50", "N = 75", "N = 100", "N = 125")
interested_N <- 25
interested_M <- 1
resol <- 150
tt <- datafr[(datafr$N == interested_N) & (datafr$M == interested_M), "tt_now"]
exact <- datafr[(datafr$N == interested_N) & (datafr$M == interested_M), "exact_sol"]
del_t <- min(tt[tt!=0])
pdf("quartic_time_to_val_N25_diffM.pdf")
till <- 4
temp <- datafr[(datafr$N == interested_N) & (datafr$M == 1), ]
temp_num <- temp[abs((temp$tt_now/del_t) %% 1) <= 1e-3, "numerical_sol"]
plot(tt, temp_num,
main = paste("Comparison among different M's when N is", as.character(interested_N)), xlab = "time", ylab = "value function",
pch=pch_val[1], col = colors_val[1])
for (i in 2:till) {
temp <- datafr[(datafr$N == interested_N) & (datafr$M == i), ]
temp_num <- temp[abs((temp$tt_now/del_t) %% 1) <= 1e-3, "numerical_sol"]
points(tt, temp_num, pch=pch_val[i], col=colors_val[i])
}
legend("topright", legend = legend_val_M[1:(till)],
col = colors_val[1:(till)], pch = pch_val[1:(till)],
cex=0.75)
dev.off()
wd <- "C:/Users/nguwijy/Dropbox/Projects/blog/deep_control"
setwd(wd)
filelist <- list.files(pattern = "control_log.txt")
datalist = lapply(filelist, function(x)read.table(x, sep=",", header=T))
datafr = do.call("rbind", datalist)
colors_val <- c("black", "red", "green", "blue", "pink", "yellow")
pch_val <- c(16, 18, 18, 18, 18, 18)
legend_val_M <- c("exact solution", "M = 1", "M = 2", "M = 3", "M = 4", "M = 5")
legend_val_N <- c("exact solution", "N = 25", "N = 50", "N = 75", "N = 100", "N = 125")
head(datafr)
plot(datafr$iteration, datafr$loss,
main = "Merton Problem", xlab = "iteration", ylab = "value function",
pch = pch_val[2], col = colors_val[2])
exact_sol <- exp(-(0.02/0.1)^2/2*0.1)*exp(-exp(0.03*0.1))
exact_sol
abline(h = exact_sol, col = colors_val[1])
legend("topright", legend = legend_val_M[1:2],
col = colors_val[1:2], pch = pch_val[1:2],
cex=0.75)
jpeg("merton.jpg", units="in", width=5, height=6, res=resol)
exact_sol <- exp(-(0.02/0.1)^2/2*0.1)*exp(-exp(0.03*0.1))
plot(datafr$iteration, datafr$loss,
main = "Merton Problem", xlab = "iteration", ylab = "value function",
pch = pch_val[2], col = colors_val[2])
abline(h = exact_sol, col = colors_val[1])
legend("topright", legend = legend_val_M[1:2],
col = colors_val[1:2], pch = pch_val[1:2],
cex=0.75)
dev.off()
# dummy problem...
filelist <- list.files(pattern = "control_log_dummy.txt")
datalist = lapply(filelist, function(x)read.table(x, sep=",", header=T))
datafr = do.call("rbind", datalist)
exact_sol <- 0
plot(datafr$iteration, datafr$loss,
main = "Merton Problem", xlab = "iteration", ylab = "value function",
pch = pch_val[2], col = colors_val[2])
abline(h = exact_sol, col = colors_val[1])
legend("topright", legend = legend_val_M[1:2],
col = colors_val[1:2], pch = pch_val[1:2],
cex=0.75)
dev.off()
head(datafr)
# dummy problem...
filelist <- list.files(pattern = "control_log_dummy.txt")
datalist = lapply(filelist, function(x)read.table(x, sep=",", header=T))
datafr = do.call("rbind", datalist)
filelist <- list.files(pattern = "control_log_dummy.txt")
datalist = lapply(filelist, function(x)read.table(x, sep=",", header=T))
datafr = do.call("rbind", datalist)
jpeg("dummy.jpg", units="in", width=5, height=6, res=resol)
exact_sol <- 0
plot(datafr$iteration, datafr$loss,
main = "Merton Problem", xlab = "iteration", ylab = "value function",
pch = pch_val[2], col = colors_val[2])
abline(h = exact_sol, col = colors_val[1])
legend("topright", legend = legend_val_M[1:2],
col = colors_val[1:2], pch = pch_val[1:2],
cex=0.75)
dev.off()
filelist <- list.files(pattern = "control_log_dummy.txt")
datalist = lapply(filelist, function(x)read.table(x, sep=",", header=T))
datafr = do.call("rbind", datalist)
jpeg("dummy.jpg", units="in", width=5, height=6, res=resol)
exact_sol <- 0
plot(datafr$iteration, datafr$loss,
main = "Minimization Problem", xlab = "iteration", ylab = "value function",
pch = pch_val[2], col = colors_val[2])
abline(h = exact_sol, col = colors_val[1])
legend("topright", legend = legend_val_M[1:2],
col = colors_val[1:2], pch = pch_val[1:2],
cex=0.75)
dev.off()
filelist <- list.files(pattern = "control_log_dummy.txt")
datalist = lapply(filelist, function(x)read.table(x, sep=",", header=T))
datafr = do.call("rbind", datalist)
jpeg("dummy.jpg", units="in", width=5, height=5, res=resol)
exact_sol <- 0
plot(datafr$iteration, datafr$loss,
main = "Minimization Problem", xlab = "iteration", ylab = "value function",
pch = pch_val[2], col = colors_val[2])
abline(h = exact_sol, col = colors_val[1])
legend("topright", legend = legend_val_M[1:2],
col = colors_val[1:2], pch = pch_val[1:2],
cex=0.75)
dev.off()
filelist <- list.files(pattern = "control_log.txt")
datalist = lapply(filelist, function(x)read.table(x, sep=",", header=T))
datafr = do.call("rbind", datalist)
colors_val <- c("black", "red", "green", "blue", "pink", "yellow")
pch_val <- c(16, 18, 18, 18, 18, 18)
legend_val <- c("exact solution", "deep approximation")
resol <- 150
jpeg("merton.jpg", units="in", width=5, height=5, res=resol)
exact_sol <- exp(-(0.02/0.1)^2/2*0.1)*exp(-exp(0.03*0.1))
plot(datafr$iteration, datafr$loss,
main = "Merton Problem", xlab = "iteration", ylab = "value function",
pch = pch_val[2], col = colors_val[2])
abline(h = exact_sol, col = colors_val[1])
legend("topright", legend = legend_val_M[1:2],
col = colors_val[1:2], pch = pch_val[1:2],
cex=0.75)
dev.off()
A <- c(102, 86, 98, 109, 92)
B <- c(81, 165, 97, 134, 92, 87, 114)
nA <- length(A)
A_bar <- mean(A)
A_var <- var(A)
nB <- length(B)
B_bar <- mean(B)
B_var <- var(B)
t <- (A_bar - B_bar)/sqrt(A_var/nA + B_var/nB)
v <- (A_var/nA + B_var/nB)^2/((A_var/nA)^2/nA + (B_var/nB)^2/nB)
v
t
v <- (A_var/nA + B_var/nB)^2/((A_var/nA)^2/(nA-1) + (B_var/nB)^2/(nB-1))
v
pvalue <- pt(t, df=v)
pvalue
t.test(A, B, mu=0, var.equal = F, alternative = "less")
# Exercise 7.2...
faculty <- read.table("C:/Users/nguwijy/Dropbox/Study Material/data analysis with computing/yeokweepoo/chap6/faculty.txt")
# Exercise 7.2...
faculty <- read.table("C:/Users/nguwijy/Dropbox/Study Material/data analysis with computing/yeokweepoo/chap7/faculty.txt")
str(faculty)
head(faculty)
aggregate(faculty$salary, list(faculty$male), FUN = length)
?aggregate
attach(faculty)
salary
boxplot(salary~male, main="All Professors")
var.test(salary[male=="Men"], salary[male=="Women"])
t.test(A, B, var.equal = F, alternative = "less")
?t.test
t.test(salary[male=="Men"], salary[male=="Women"], alternative = "greater")
?boxplot
boxplot(salary~male, subset = rank=="Assistant", main="Assistant Professors")
var.test(salary[male=="Men" & rank=="Assistant"], salary[male=="Women" & rank=="Assistant"])
t.test(salary[male=="Men" & rank=="Assistant"], salary[male=="Women" & rank=="Assistant"], alternative = "greater")
diff <- new - old
# Exercise 7.3...
new <- c(2250, 2410, 2260, 2200, 2360, 2320, 2240, 2300, 2090)
old <- c(1920, 2020, 2060, 1960, 1960, 2140, 1980, 1940, 1790)
diff <- new - old
t.test(diff, mu=250, alternative = "greater")
t.test(new, old, mu=250, alternative = "greater")
t.test(diff, mu=250, alternative = "greater")
a = c(4,5,4,3,2,4,3,4,4)
b = c(6,8,4,5,4,6,5,8,6)
c = c(6,7,6,6,7,5,6,5,5)
pain <- c(a, b, c)
pain
drug <- c(rep("A", 9), rep("B", 9), rep("C", 9))
boxplot(pain ~ drug, ylab = "Pain Score")
list(drug)
aggregate(pain, list(drug), FUN=summary)
summary(pain)
aggregate(pain, list(drug), FUN=length)
aggregate(pain, list(drug), FUN=var)
summary(aov(pain ~ drug))
pairwise.t.test(pain, drug, p.adjust.method = "none")
